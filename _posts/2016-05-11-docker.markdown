---
layout:     post
title:      "浅析 Docker 容器的应用场景"
subtitle:   " \"Docker 应用\""
date:       2016-05-11 00:00:00
author:     "Hai"
header-img: "img/post-head/201605112005.jpg"
tags:
    - Docker
---

过去几年开源界以 Openstack 为代表的云计算持续火了好久，这两年突然又冒出一个叫 Docker 的容器技术，其发展之迅猛远超预料。

网上介绍 Docker 容器的文章已经很多了，用一句话概括：Docker 是一种轻量虚拟化的容器技术，提供类似虚拟机的隔离功能，并使用了一种分层的联合文件系统技术管理镜像，能极大简化环境运维过程。

Docker 容器云则是使用 Docker 技术打造的一站式容器云服务平台，即 CaaS(Containers as a Service)-容器即服务；可以将它简单看作为 PaaS 的升级版，使用 Docker 容器技术的 CaaS 平台功能更强大，使用灵活，部署更方便。

Docker 容器作为一个全新的概念虽然广受关注，但是对于如何使用 Docker，将容器技术真正落地用起来，目前估计很多人还没有非常清晰的思路。写这篇文章主要目的就是根据 Docker 容器的特点，描述 Docker 容器到底能用来干什么，达到抛砖引玉的目的。

可以认为容器云是处于 IaaS 和 PaaS 之间的位置，容器编排集成度越高越像 PaaS，反之越像 IaaS，据此这里简单地将 Docker 容器的使用分两大类：主机和服务。

# 作为云主机使用

相比虚拟机来说，容器使用的是一系列非常轻量级的虚拟化技术，使得其启动、部署、升级跟管理进程一样迅速，用起来灵活又感觉跟虚拟机一样没什么区别，所以有些人直接使用 Docker 的 Ubuntu 等镜像创建容器，当作轻量的虚拟机来使用。

特别是现在随着系统、软件越来越多，开发测试环境越来越复杂，仅仅靠多用户共享的这种方式节省资源带来的后果就是环境完全不可控。Docker容器的出现让每个人仅仅通过一个几 KB 的 Dockerfile 文件就能构建一个自定义的系统镜像，进而启动一个完整系统容器，让人人都能成为 DevOps。

容器云主机也完全能像普通主机一样随意启动、稳定运行、关机、重启，所以在上面随意搭建博客、小网站等完全不在话下。除了常用的托管服务业务，你完全可以自定义任何用法，包括在上面使用任何云服务提供商的云硬盘、云数据库，部署各种你需要的服务。

目前 Docker 容器管理服务器在 Windows 下运行需要借助 Toolbox 工具，虽然微软在 2014 年底就计划提供 Windows Server 容器镜像但目前还没有发布，所以想在 Docker 里跑 Windows 系统的容器的人还需要等待，希望到时候微软能裁剪出一种轻巧的 Windows 基础镜像，毕竟容器本身就是一种更轻量级的系统。


# 作为服务使用

如果你仅仅把 Docker 容器当作一个轻量的固定虚拟机用，那其实只能算是另类用法，Docker 容器最重要价值在于提供一整套平台无关的标准化技术，简化服务的部署、升级、维护，只要把需要运维的各种服务打包成标准的集装箱，就可以在任何能运行 Docker 的环境下跑起来，达到开箱即用的效果，这个特点才是 Docker 容器风靡全球的根本原因。

下面重点列举几个使用docker容器部署服务的场景。


## 1 Web应用服务

Web 应用服务是使用最广泛的一类服务，典型的架构是前端一个 Tomcat + Java 服务，后端 MySQL 数据库。

前端的 Java web 服务器是最适合使用 Docker 容器的，先将 Java 运行环境、Web 服务器直接打包成一个通用的基础 Docker 镜像，之后再将自定义应用代码或编译程序包加入到该基础镜像中就能产生一个新的应用镜像，最后通过 Docker 服务立马就能以容器的形式启动 Web 应用服务。

因为 Web 应用程序一般是无状态的，随着业务访问量增减，用同样的镜像新建、销毁容器即可轻松实现伸缩（前面还需配上 DNS 域名或者负载均衡的服务），例如下图所示：

![](http://mmbiz.qpic.cn/mmbiz/Kp8zGHrttZZib1V5wCUnGdXW36ISriaGIN6f17TeH2icbmxrKWDmiaGwFguebXJtD8Oibib7nY7Y7iadv3HDghEmfP7Ig/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1)


## 2 持续集成和持续部署

互联网行业倡导敏捷开发，持续集成部署 CI/CD 便是最典型的开发模式。

使用 Docker 容器云平台，就能实现从代码编写完成推送到 Git/SVN 后，自动触发后端CaaS平台将代码下载、编译并构建成测试 Docker 镜像，再替换测试环境容器服务，自动在 Jenkins 或者 Hudson 中运行单元/集成测试，最后测试通过后，马上就能自动将新版本镜像更新到线上，完成服务升级。

整个过程全自动化，一气呵成，最大程度地简化了运维成本，而且保证线上、线下环境完全一致，线上服务版本与 Git/SVN 发布分支也实现统一。

![](http://mmbiz.qpic.cn/mmbiz/Kp8zGHrttZZib1V5wCUnGdXW36ISriaGINZsGxcUgaoLhCJ0TibWF2icnibZh6BR8PSjTSmSpCoZ99c0U1mOkDsDW6A/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1)

## 3 微服务架构使用

如果说上面两种应用场景还不足以体现出与传统的 PaaS 平台相比的巨大优势的话，那么对微服务的架构这种复杂又灵活的使用场景的无缝支持绝对具有革命意义。

微服务架构将传统分布式服务继续拆分解耦，形成一些更小服务模块，服务模块之间独立部署升级，这些特性与容器的轻量、高效部署不谋而合。

如下图所示，每个容器里可以使用完全不同环境的镜像服务，容器启动即产生了一个独立的微服务主机节点（独立的网络 IP），上层服务与下层服务之间服务发现通过环境变量注入、配置文件挂载等多种方式灵活解决，而且还可以直接将云平台提供的各种云服务与自定义的微服务整合组成一个强大的服务集群。

更重要的是，拥有如此多服务的集群环境迁移、复制也非常轻松，只需选择好各服务对应的 Docker 服务镜像、配置好相互之间访问地址就能很快搭建出一份完全一样的新集群。

![](http://mmbiz.qpic.cn/mmbiz/Kp8zGHrttZZib1V5wCUnGdXW36ISriaGINicCkqGjIu63t1eecNxKbjWKIvJPzY82GOczw1YOYqFAkU5cjThxwqFQ/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1)

## 4 其他应用场景

* 跑一次性/定时任务<br>
有些情况下用户只是需要执行一次性的任务，例如计算出某个结果即可，如果采用传统的服务模式，服务器需要一直运行，造成的极大的资源浪费。而容器的快速创建、销毁能很灵活满足这种完全按需付费的场景。只要制作好一次性程序运行的docker镜像，当需要运行的时候实时通过镜像创建出容器来执行任务，程序执行完成容器自动退出释放资源。<br>
当然，容器本身只包含静态的镜像和上层的临时可读写层，运行的数据是不会持久化的，所以任务相关数据可以从云存储、云硬盘或者云端数据库里读写。

* 科学计算服务<br>
在信息化的今天，除了计算机领域，自然科学等领域也越来越需要借助一些复杂的程序软件来做计算分析，如果还要求他们学习繁杂的服务运维部署就太麻烦了，国外就有科研人员用 Docker 自行部署 IPython Notebook 服务器开展数据科学研究的例子。

* 游戏和网联网等<br>
腾讯曾宣称他们已经将 Docker 容器用在游戏服务端使用 Docker，因为对游戏不了解，具体怎么用的没太关注，有需要的人可以参考下他们的使用思路。


# 网易蜂巢

基于网易自研 IaaS 为企业及开发者打造的基于Docker的容器云，提供安全灵活的容器即服务，兼具应用引擎类 PaaS 服务的便利性和 IaaS 服务的灵活性，是虚拟主机的进化版本。为满足不同用户需求，如上文所述，目前同时提供容器（主机）和服务两种使用方式，容器可看成是一个独立的主机节点，提供 ssh 客户端登录实现自由操作；服务则是一组无状态的可随时伸缩的服务组，对外通过网易的负载均衡暴露统一服务入口提供服务。

网易蜂巢的 Docker 镜像仓库里包含最常用的一些公有镜像供大家直接使用，用户还可以在上面管理自定义的私有镜像，通过扁平的用户私有网络实现内部容器之间的互通。对无状态容器服务提供可靠、可伸缩的在线数据库服务（RDS），前端还能配置负载均衡服务NLB方便按需扩容和缩容。此外，还提供云缓存服务及日志服务、性能检测、监控报警、OpenAPI 等工具。

对于无法自行维护一整套容器服务的创业团队、中小企业，通过蜂巢就可以体验 Docker 容器的魅力。



转自网易云  娄超